

Refer back to to them if you have problems with any of the commands!



docker container run -d -p 5000:5000 in28min/hello-world-nodejs:0.0.1.RELEASE
docker container run -d -p 5000:5000 in28min/hello-world-java:0.0.1.RELEASE
docker container run -d -p 5000:5000 in28min/hello-world-python:0.0.1.RELEASE
docker container ls 
docker image ls
docker container stop cc
docker container run -d -p 5001:5000 in28min/hello-world-nodejs:0.0.1.RELEASE
docker container run -d -p 5002:5000 in28min/hello-world-nodejs:0.0.1.RELEASE
docker container run -p 5003:5000 in28min/hello-world-nodejs:0.0.1.RELEASE
docker container run -p 5003:5000 in28min/hello-world-nodejs:0.0.1.RELEASE
 
docker --version
docker container ls
docker build -t in28min/hello-world-docker:v1 .
docker image list
docker run -d -p 5000:5000 in28min/hello-world-docker:v1
docker build -t in28min/hello-world-docker:v2 .
docker container run -d -p 5000:5000 in28min/hello-world-docker:v2
docker build -t in28min/hello-world-docker:v3 .
docker container run -d -p 5000:5000 in28min/hello-world-docker:v3
docker build -t in28min/hello-world-docker:v4 .


ranga
and
pandey

how to build docker images and run onto local machine there are 3 options ot build
first create with same name-- Dockerfile-- put below codes to build maven and copy jar file
then run the command in terminal on same folder:docker run -d -p 5001:5001 <image_name>
chk above commands to check container list, image list, etc

use java -21

for option 1: before first mvn clean and install using maven tab in intelijidea
option 1: put in Dockerfile:

    FROM openjdk:18.0-slim
    COPY target/*.jar app.jar
    EXPOSE 5000
    ENTRYPOINT ["java","-jar","/app.jar"]
 then build command to build image

put into ur Dockerfile
option 2:Build jar file multi-stage
    FROM maven:3.9.4-eclipse-temurin-21 AS build
    WORKDIR /home/app
    COPY . /home/app
    RUN mvn -f /home/app/pom.xml clean package

    FROM eclipse-temurin:21-jre
    EXPOSE 5000
    COPY --from=build /home/app/target/*.jar app.jar
    ENTRYPOINT [ "sh", "-c", "java -jar /app.jar" ]

option 3: using Caching-put below code into Docker file
    FROM maven:3.9.4-eclipse-temurin-21 AS build
    WORKDIR /home/app

    COPY ./pom.xml /home/app/pom.xml
    COPY ./src/main/java/com/in28minutes/rest/webservices/restfulwebservices/RestfulWebServicesApplication.java	/home/app/src/main/java/com/in28minutes/rest/webservices/restfulwebservices/RestfulWebServicesApplication.java

    RUN mvn -f /home/app/pom.xml clean package

    COPY . /home/app
    RUN mvn -f /home/app/pom.xml clean package

    FROM eclipse-temurin:21-jre
    EXPOSE 5001
    COPY --from=build /home/app/target/*.jar app.jar
    ENTRYPOINT [ "sh", "-c", "java -jar /app.jar" ]




HOw to push docker image into docker hub:

Log in to Docker Hub:


docker login



docker tag inpandey/hello-world-docker:v3 <your-dockerhub-username>/hello-world-docker:v3
Push the Image to Docker Hub:


docker push <your-dockerhub-username>/hello-world-docker:v3
Run the Image on Another System: On another system, pull the image:


docker pull <your-dockerhub-username>/hello-world-docker:v3
Then run it:


docker run -p 5001:5000 <your-dockerhub-username>/hello-world-docker:v3
